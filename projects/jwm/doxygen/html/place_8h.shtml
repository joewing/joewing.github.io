
<!--#set var="TITLE" value="JWM Source Documentation"-->
<!--#include virtual="/head.shtml"-->
<h1><!--#echo var="TITLE"--></h1>
<p/>
<div>
<!-- Generated by Doxygen 1.8.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.shtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>Globals</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.shtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">place.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Header for client placement functions.  
<a href="#details">More...</a></p>

<p><a href="place_8h_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structBoundingBox.shtml">BoundingBox</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounding box.  <a href="structBoundingBox.shtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a9b33d2fd582da7ff2d93f8b90aef5bd2"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structBoundingBox.shtml">BoundingBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a9b33d2fd582da7ff2d93f8b90aef5bd2">BoundingBox</a></td></tr>
<tr class="memdesc:a9b33d2fd582da7ff2d93f8b90aef5bd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounding box.  <a href="#a9b33d2fd582da7ff2d93f8b90aef5bd2">More...</a><br/></td></tr>
<tr class="separator:a9b33d2fd582da7ff2d93f8b90aef5bd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7af899662c6e85969944cc8f052b9031"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a7af899662c6e85969944cc8f052b9031">RemoveClientStrut</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np)</td></tr>
<tr class="memdesc:a7af899662c6e85969944cc8f052b9031"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove struts associated with a client.  <a href="#a7af899662c6e85969944cc8f052b9031">More...</a><br/></td></tr>
<tr class="separator:a7af899662c6e85969944cc8f052b9031"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc4d12c48d1e0e39d3838b8a7a009a49"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#abc4d12c48d1e0e39d3838b8a7a009a49">ReadClientStrut</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np)</td></tr>
<tr class="memdesc:abc4d12c48d1e0e39d3838b8a7a009a49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read struts associated with a client.  <a href="#abc4d12c48d1e0e39d3838b8a7a009a49">More...</a><br/></td></tr>
<tr class="separator:abc4d12c48d1e0e39d3838b8a7a009a49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f91922fab398dca02641a14b0fe59f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a7f91922fab398dca02641a14b0fe59f3">PlaceClient</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np, char alreadyMapped)</td></tr>
<tr class="memdesc:a7f91922fab398dca02641a14b0fe59f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Place a client on the screen.  <a href="#a7f91922fab398dca02641a14b0fe59f3">More...</a><br/></td></tr>
<tr class="separator:a7f91922fab398dca02641a14b0fe59f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0e8ac313f4a1b185558e7647bace538"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#ae0e8ac313f4a1b185558e7647bace538">PlaceMaximizedClient</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np, char horiz, char vert)</td></tr>
<tr class="memdesc:ae0e8ac313f4a1b185558e7647bace538"><td class="mdescLeft">&#160;</td><td class="mdescRight">Place a maximized client on the screen.  <a href="#ae0e8ac313f4a1b185558e7647bace538">More...</a><br/></td></tr>
<tr class="separator:ae0e8ac313f4a1b185558e7647bace538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaef221ca988fe148fa7d9e58c3968bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#afaef221ca988fe148fa7d9e58c3968bd">GravitateClient</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np, char negate)</td></tr>
<tr class="memdesc:afaef221ca988fe148fa7d9e58c3968bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move a client window for a border.  <a href="#afaef221ca988fe148fa7d9e58c3968bd">More...</a><br/></td></tr>
<tr class="separator:afaef221ca988fe148fa7d9e58c3968bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc643e588db3ca17dcdf2aeb2a14245"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a3fc643e588db3ca17dcdf2aeb2a14245">GetGravityDelta</a> (const struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np, int *x, int *y)</td></tr>
<tr class="memdesc:a3fc643e588db3ca17dcdf2aeb2a14245"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the x and y deltas for gravitating a client.  <a href="#a3fc643e588db3ca17dcdf2aeb2a14245">More...</a><br/></td></tr>
<tr class="separator:a3fc643e588db3ca17dcdf2aeb2a14245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefc83a85e83eeea25dbe2274b3b07be3"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#aefc83a85e83eeea25dbe2274b3b07be3">ConstrainSize</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np)</td></tr>
<tr class="memdesc:aefc83a85e83eeea25dbe2274b3b07be3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constrain the size of a client.  <a href="#aefc83a85e83eeea25dbe2274b3b07be3">More...</a><br/></td></tr>
<tr class="separator:aefc83a85e83eeea25dbe2274b3b07be3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0eeeeda372b7cd72bc4226efad0d760"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#ae0eeeeda372b7cd72bc4226efad0d760">ConstrainPosition</a> (struct <a class="el" href="structClientNode.shtml">ClientNode</a> *np)</td></tr>
<tr class="memdesc:ae0eeeeda372b7cd72bc4226efad0d760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constrain the position of a client.  <a href="#ae0eeeeda372b7cd72bc4226efad0d760">More...</a><br/></td></tr>
<tr class="separator:ae0eeeeda372b7cd72bc4226efad0d760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af41be222f1d629311cb8aec189f89736"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#af41be222f1d629311cb8aec189f89736">GetScreenBounds</a> (const struct <a class="el" href="structScreenType.shtml">ScreenType</a> *sp, <a class="el" href="structBoundingBox.shtml">BoundingBox</a> *box)</td></tr>
<tr class="memdesc:af41be222f1d629311cb8aec189f89736"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the bounding box for the screen.  <a href="#af41be222f1d629311cb8aec189f89736">More...</a><br/></td></tr>
<tr class="separator:af41be222f1d629311cb8aec189f89736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2a1e7f7b6a59ddf62457015d60464c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#af2a1e7f7b6a59ddf62457015d60464c7">SubtractTrayBounds</a> (const struct <a class="el" href="structTrayType.shtml">TrayType</a> *tp, <a class="el" href="structBoundingBox.shtml">BoundingBox</a> *box, unsigned int layer)</td></tr>
<tr class="memdesc:af2a1e7f7b6a59ddf62457015d60464c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtract bounds for the configured trays.  <a href="#af2a1e7f7b6a59ddf62457015d60464c7">More...</a><br/></td></tr>
<tr class="separator:af2a1e7f7b6a59ddf62457015d60464c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9c3662dac6e7a2c3858b95139f722e3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#aa9c3662dac6e7a2c3858b95139f722e3">InitializePlacement</a>()&#160;&#160;&#160;(void)(0)</td></tr>
<tr class="separator:aa9c3662dac6e7a2c3858b95139f722e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7e671d7b778f135462170ebbd64b398"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#ab7e671d7b778f135462170ebbd64b398">DestroyPlacement</a>()&#160;&#160;&#160;(void)(0)</td></tr>
<tr class="separator:ab7e671d7b778f135462170ebbd64b398"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0161d39626f774e65e3c9c61cdc5a77c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a0161d39626f774e65e3c9c61cdc5a77c">StartupPlacement</a> (void)</td></tr>
<tr class="separator:a0161d39626f774e65e3c9c61cdc5a77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a446bab8225b94ef783b4b76a22fdcff8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="place_8h.shtml#a446bab8225b94ef783b4b76a22fdcff8">ShutdownPlacement</a> (void)</td></tr>
<tr class="separator:a446bab8225b94ef783b4b76a22fdcff8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Header for client placement functions. </p>
<dl class="section author"><dt>Author</dt><dd>Joe Wingbermuehle </dd></dl>
<dl class="section date"><dt>Date</dt><dd>2004-2006 </dd></dl>

<p>Definition in file <a class="el" href="place_8h_source.shtml">place.h</a>.</p>
</div><h2 class="groupheader">Macro Definition Documentation</h2>
<a class="anchor" id="ab7e671d7b778f135462170ebbd64b398"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DestroyPlacement</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;(void)(0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="place_8h_source.shtml#l00029">29</a> of file <a class="el" href="place_8h_source.shtml">place.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa9c3662dac6e7a2c3858b95139f722e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define InitializePlacement</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;(void)(0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="place_8h_source.shtml#l00026">26</a> of file <a class="el" href="place_8h_source.shtml">place.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a9b33d2fd582da7ff2d93f8b90aef5bd2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structBoundingBox.shtml">BoundingBox</a>  <a class="el" href="structBoundingBox.shtml">BoundingBox</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bounding box. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ae0eeeeda372b7cd72bc4226efad0d760"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConstrainPosition </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constrain the position of a client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aefc83a85e83eeea25dbe2274b3b07be3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char ConstrainSize </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constrain the size of a client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if the size changed, 0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3fc643e588db3ca17dcdf2aeb2a14245"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGravityDelta </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the x and y deltas for gravitating a client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
    <tr><td class="paramname">x</td><td>Location to store the x delta. </td></tr>
    <tr><td class="paramname">y</td><td>Location to store the y delta. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af41be222f1d629311cb8aec189f89736"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetScreenBounds </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structScreenType.shtml">ScreenType</a> *&#160;</td>
          <td class="paramname"><em>sp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structBoundingBox.shtml">BoundingBox</a> *&#160;</td>
          <td class="paramname"><em>box</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the bounding box for the screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sp</td><td>A pointer to the screen whose bounds to get. </td></tr>
    <tr><td class="paramname">box</td><td>The bounding box for the screen. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afaef221ca988fe148fa7d9e58c3968bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GravitateClient </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>negate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move a client window for a border. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
    <tr><td class="paramname">negate</td><td>0 to gravitate for a border, 1 to gravitate for no border. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7f91922fab398dca02641a14b0fe59f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PlaceClient </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>alreadyMapped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Place a client on the screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client to place. </td></tr>
    <tr><td class="paramname">alreadyMapped</td><td>1 if already mapped, 0 if unmapped. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae0e8ac313f4a1b185558e7647bace538"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PlaceMaximizedClient </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>horiz</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>vert</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Place a maximized client on the screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client to place. </td></tr>
    <tr><td class="paramname">horiz</td><td>Set if maximizing horizontally. </td></tr>
    <tr><td class="paramname">vert</td><td>Set if maximizing vertically. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abc4d12c48d1e0e39d3838b8a7a009a49"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReadClientStrut </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read struts associated with a client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7af899662c6e85969944cc8f052b9031"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RemoveClientStrut </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structClientNode.shtml">ClientNode</a> *&#160;</td>
          <td class="paramname"><em>np</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove struts associated with a client. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">np</td><td>The client. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a446bab8225b94ef783b4b76a22fdcff8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ShutdownPlacement </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a0161d39626f774e65e3c9c61cdc5a77c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StartupPlacement </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="af2a1e7f7b6a59ddf62457015d60464c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SubtractTrayBounds </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structTrayType.shtml">TrayType</a> *&#160;</td>
          <td class="paramname"><em>tp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structBoundingBox.shtml">BoundingBox</a> *&#160;</td>
          <td class="paramname"><em>box</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>layer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Subtract bounds for the configured trays. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tp</td><td>The first tray to consider. </td></tr>
    <tr><td class="paramname">box</td><td>The bounding box. </td></tr>
    <tr><td class="paramname">layer</td><td>The maximum layer of the tray bounds. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->

<!--#include virtual="/tail.shtml"-->
