
<!--#set var="TITLE" value="Jargon Language Description"-->
<!--#include virtual="/head.shtml"-->

<h1><!--#echo var="TITLE"--></h1>

The Jargon Programming Language v0.3 20030120 &lt;&gt; 20030915<br />
by Joe Wingbermuehle

<ul>
	<li><a href="#background">Background</a></li>
	<li><a href="#syntax">Basic Syntax</a></li>
	<li><a href="#literals">Literals</a></li>
	<li><a href="#ident">Identifiers</a></li>
	<li><a href="#special">Special Characters</a></li>
	<li><a href="#primary">Primary Types</a></li>
	<li><a href="#operators">Operators</a></li>
	<li><a href="#conditional">Conditional Constructs</a></li>
	<li><a href="#looping">Looping Constructs</a></li>
	<li><a href="#arrays">Arrays</a></li>
	<li><a href="#enum">Enumerations</a></li>
	<li><a href="#modules">Modules</a></li>
	<li><a href="#handlers">Handlers</a></li>
	<li><a href="#objects">Objects</a></li>
	<li><a href="#attributes">Attributes</a></li>
	<li><a href="#concurrency">Concurrency</a></li>
	<li><a href="#exceptions">Exceptions</a></li>
	<li><a href="#misc">Miscellaneous Language Features</a></li>
	<li><a href="#tobe">Features To Be Realized</a></li>
</ul>

<h2 id="background">Background</h2>
<p>
Jargon is a message based programming language. Execution of a Jargon
program begins in the &quot;Main&quot; module in the &quot;main&quot;
handler, which takes an array of strings as input.
Variables and modules must be declared before use. However, handlers
may be declared at any point within the module in which they reside.
Jargon supports single inheritance of modules and overloaded message
handlers.
</p>

<h2 id="syntax">Basic Syntax</h2>
<p>
Jargon is case sensitive (all keywords are lowercase).
The character sequence "--" denotes a comment. The comment remains
in effect until the end of the line. The ';' character denotes the end of a
statement. Statements may span multiple lines. Note that Jargon defines
a statement to be a smaller entity than most languages. In Jargon, a
statement cannot contain another statement. This makes parsing the
language more straight-forward and allows better error detection and
recovery.
</p>

<h2 id="literals">Literals</h2>
<p>
There are five types of literals: boolean, character, floating point,
integral, and string. A boolean literal is either "true" or "false".
A character literal is surrounded by single quotes '''.
A floating point literal contains numbers and a decimal point '.'. An integral
literal contains numbers. Finally, a string is surrounded by double quotes '"'.
Within both character and string literals, special characters may be inserted
by means of an escape sequence. Strings are null-terminated.  All numbers are
assumed to be in base 10 unless a suffix is applied. Possible
suffixes are 'o' for octal, 'h' for hexidecimal, and 'b' for binary
('d' may be used for decimal for clarity, but is not necessary nor
recommended in most cases).
</p>

<h2 id="ident">Identifiers</h2>
<p>
Identifiers are case sensitive and may be of any length &gt;= 1. The first
character must be alphabetic [a-zA-Z_], but the following characters may
also include digits [0-9].
</p>

<h2 id="special">Special Characters</h2>
<p>
Special characters can be represented as literals by using the following
escape sequences.</p>
<table class="listing">
<tr class="head"><th>Sequence</th><th>Description</th></tr>
<tr class="listing"><td>\'</td><td>Character quote '''</td></tr>
<tr class="listing"><td>\"</td><td>Double quote '"'</td></tr>
<tr class="listing"><td>\\</td><td>Backslash '\'</td></tr>
<tr class="listing"><td>\0</td><td>Null</td></tr>
<tr class="listing"><td>\a</td><td>Alert (bell)</td></tr>
<tr class="listing"><td>\b</td><td>Backspace</td></tr>
<tr class="listing"><td>\d???</td><td>Decimal value</td></tr>
<tr class="listing"><td>\n</td><td>New line</td></tr>
<tr class="listing"><td>\o???</td><td>Octal value</td></tr>
<tr class="listing"><td>\r</td><td>Carriage return</td></tr>
<tr class="listing"><td>\t</td><td>Tab</td></tr>
<tr class="listing"><td>\x??</td><td>Hex value</td></tr>
</table>
<p />

<h2 id="primary">Primary Types</h2>
<p>
Jargon supports six primary types.</p>
<table class="listing">
<tr class="head"><th>Type</th><th>Description</th></tr>

<tr class="listing"><td>bool</td>
	<td>Boolean value: "true" or "false". All conditional
	expressions must reduce to type bool.</td></tr>

<tr class="listing"><td>char</td>
	<td>Signed 8-bit ASCII character.</td></tr>

<tr class="listing"><td>int</td>
	<td>Signed integer.</td></tr>

<tr class="listing"><td>float</td>
	<td>Signed floating point value.</td></tr>

<tr class="listing"><td>string</td>
	<td>Unbounded character string.</td></tr>

<tr class="listing"><td>object</td>
	<td>Pointer to an instance of a module.</td></tr>

</table>
<p></p>

<h2 id="operators">Operators</h2>
<p>
Expressions are parsed from left to right. Operators are parsed based
on the order given below, which is very similar to the standard order
of operations.</p>

<table class="listing">
<tr class="head"><th>Op</th><th>Order</th><th>Description</th>
<th>bool</th>
<th>char</th>
<th>int</th>
<th>float</th>
<th>string</th>
<th>object</th></tr>

<tr class="listing"><td>and</td><td align="center">6 (infix)</td>
<td>Logical AND.</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>or</td><td align="center">6 (infix)</td>
<td>Logical OR.</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>==</td><td align="center">5 (infix)</td>
<td>Test for equality. Returns type bool.</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td></tr>

<tr class="listing"><td>/=</td><td align="center">5 (infix)</td>
<td>Test for inequality. Returns type bool.</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td></tr>

<tr class="listing"><td>&gt;=</td><td align="center">5 (infix)</td>
<td>Test for greater than or equal to. Returns type bool.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>&lt;=</td><td align="center">5 (infix)</td>
<td>Test for less than or equal to. Returns type bool.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>&gt;</td><td align="center">5 (infix)</td>
<td>Test for greater than. Returns type bool.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>&lt;</td><td align="center">5 (infix)</td>
<td>Test for less than. Returns type bool.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>+</td><td align="center">4 (infix)</td>
<td>Addition or string concatenation.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>-</td><td align="center">4 (infix)</td>
<td>Subtraction.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>*</td><td align="center">3 (infix)</td>
<td>Multiplication.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>/</td><td align="center">3 (infix)</td>
<td>Division.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>%</td><td align="center">3 (infix)</td>
<td>Modulus.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>&amp;</td><td align="center">3 (infix)</td>
<td>Bitwise AND.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>|</td><td align="center">3 (infix)</td>
<td>Bitwise OR.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>^</td><td align="center">2 (infix)</td>
<td>Power.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>not</td><td align="center">1 (prefix)</td>
<td>Logical NOT.</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>-</td><td align="center">1 (prefix)</td>
<td>Negation.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>~</td><td align="center">1 (prefix)</td>
<td>Bitwise complement.</td>
<td class="unchecked"> </td>
<td class="checked">X</td>
<td class="checked">X</td>
<td class="unchecked"> </td>
<td class="unchecked"> </td>
<td class="unchecked"> </td></tr>

</table>
<p></p>

<h2 id="conditional">Conditional Constructs</h2>
<p />
<pre><span class="comment">
	-- If <i>exp1</i> is true, perform <i>statements1</i>, else if
	-- <i>exp2</i> is true perform <i>statements2</i>, else perform
	-- <i>statements3</i>. As many elsif sections may be
	-- added as needed. Both the elseif and else sections
	-- are optional.</span>
	<span class="keyword">if</span> <i>exp1</i>;
		<i>statements1</i>;
	<span class="keyword">elsif</span> <i>exp2</i>;
		<i>statements2</i>;
	<span class="keyword">else</span>;
		<i>statements3</i>;
	<span class="keyword">end</span>;

<span class="comment">
	-- Go to the first when clause that matches <i>exp1</i>.
	-- If no when clause matches, go to the default case.
	-- The default and when clauses are all optional.</span>
	<span class="keyword">switch</span> <i>exp1</i>;
	<span class="keyword">when</span> <i>exp2</i>;
		<i>statements1</i>;
	<span class="keyword">when</span> <i>exp3</i>, <i>exp4</i>;
		<i>statements2</i>;
	...
	<span class="keyword">default</span>;
		<i>statements3</i>;
	<span class="keyword">end</span>;
</pre>
<p />

<h2 id="looping">Looping Constructs</h2>
<p></p>
<pre><span class="comment">
	-- Perform <i>statements</i> while <i>exp</i> is true.</span>
	<span class="keyword">while</span> <i>exp</i>;
		<i>statements</i>;
	<span class="keyword">end</span>;

<span class="comment">
	-- Set <i>ident</i> to <i>exp1</i> and loop until it reaches
	-- (or exceeds) <i>exp2</i>. <i>ident</i> is incremented if "upto"
	-- is used. If "downto" is specified, <i>ident</i> is
	-- decremented. The direction of the increment
	-- determines if <i>ident</i> has "exceeded" <i>exp2</i>.</span>
	<span class="keyword">for</span> <i>ident</i> = <i>exp1</i> ( <span class="keyword">upto</span> | <span class="keyword">downto</span> ) <i>exp2</i>;
		<i>statements</i>;
	<span class="keyword">end</span>;

	<span class="comment">-- Break out of the innermost loop</span>
	<span class="keyword">break</span>;

	<span class="comment">-- Start next iteration of the innermost loop</span>
	<span class="keyword">continue</span>;
</pre>
<p />

<h2 id="arrays">Arrays</h2>
<p>
Arrays are a special kind of object. Like objects, they must be explicitly
allocated. Arrays (like strings) are zero based. Arrays of multiple
dimensions can be simulated using arrays of arrays. Arrays have certain
<a href="#attributes">Attributes</a> that may be accessed using the single
quote character.</p>
<pre>
	<span class="comment">-- Create an array of eight bool's</span>
	<span class="keyword">bool</span>[] flags = <span class="keyword">new bool</span>[<span class="literal">8</span>];

	<span class="comment">-- Initialize the values to "false"</span>
	<span class="keyword">int</span> x;
	<span class="keyword">for</span> x = 0 <span class="keyword">upto</span> flags'length - <span class="literal">1</span>;
		flags[x] = <span class="literal">false</span>;
	<span class="keyword">end</span>;

	<span class="comment">-- Delete the array of bool's</span>
	<span class="keyword">delete</span> flags;

	<span class="comment">-- Create a 2d matrix of integers</span>
	<span class="keyword">int</span>[][] matrix = <span class="keyword">new object</span>[<span class="literal">5</span>];
	<span class="keyword">for</span> x = <span class="literal">0</span> <span class="keyword">upto</span> matrix'length - <span class="literal">1</span>;
		matrix[x] = <span class="keyword">new int</span>[<span class="literal">4</span>];
	<span class="keyword">end</span>;

	[Jargon:print matrix'length];		<span class="comment">-- Output 5</span>
	[Jargon:print matrix[0]'length];	<span class="comment">-- Output 4</span>

	<span class="comment">-- Delete the matrix</span>
	<span class="keyword">for</span> x = <span class="literal">0</span> <span class="keyword">upto</span> matrix'length - <span class="literal">1</span>;
		<span class="keyword">delete</span> matrix[x];
	<span class="keyword">end</span>;
	<span class="keyword">delete</span> matrix;

</pre>
<p />

<h2 id="enum">Enumerations</h2>
<p>
Enumerations may be used to create a list of related constants. Enumerations
may be defined within the global scope, modules, or handlers.
Enumerations are used as follows:</p>
<pre>
	<span class="keyword">enum</span> <i>name</i>;
		<i>first</i>, <i>second</i>, ... ;
	<span class="keyword">end</span>;

	<span class="comment">-- Note that enumerations work exactly like
	-- constant integers.</span>
	<i>i</i> = <i>name</i>.<i>value</i>;
</pre>
<p />

<h2 id="modules">Modules</h2>
<p>
Jargon programs consist of hierarchies of modules and instances of these
modules called <a href="#objects">objects</a>. Modules may contain data,
handlers, and modules. Each module has the form:</p>
<pre>
	<span class="keyword">module</span> <i>name</i>;
		<i>local data declarations</i>;
		<i>handlers</i>;

		<span class="comment">-- Statements to be executed when an instance of
		-- this module is created with the new keyword.</span>
		<span class="keyword">new</span>;
			<i>local data declarations</i>;
			<i>statements</i>;
		<span class="keyword">end</span>;

		<span class="comment">-- Statements to be executed when an instance of
		-- this module is destroyed with the delete keyword.</span>
		<span class="keyword">delete</span>;
			<i>local data declarations</i>;
			<i>statements</i>;
		<span class="keyword">end</span>;

	<span class="keyword">end</span>;
</pre>
<p>
Note that the <i>new</i> and <i>delete</i> sections are optional.
The <i>new</i> and <i>delete</i> sections are only run when the <i>new</i>
or <i>delete</i> keyword is used respectfully. Also, local data
declarations within a module cannot have default values (this may be
changed in the future such that the initial values only apply to the
static instance of the module or possibly allowed completely).
</p>

<h2 id="handlers">Handlers</h2>
<p>
Handlers are a parallel to (member) functions in most programming languages.
Arguments are always passed by value. Handlers may be overloaded by
argument type. Handlers must always exist within a module. A value may or
may not be returned by the handler. It is assumed that the caller will use
a return value (if any) appropriately.</p>
<pre><span class="comment">
	-- Declare a handler named "Foo" with a comma
	-- separated list of arguments
	-- (in the format: type name).</span>
	<span class="keyword">handler</span> [Foo <i>arguments</i>];
		<i>local data declarations</i>;
		<i>statements</i>;
	<span class="keyword">end</span>;
</pre>
<p />

<h2 id="objects">Objects</h2>
<p>
An object is an instance of a <a href="#modules">module</a>. Each object
has its own data distinct from the module of which it is an instance and
from other instances of that module. Examples:</p>
<pre>
	<span class="comment">-- Create a new instance of "Foo"</span>
	<span class="keyword">object</span> o = <span class="keyword">new</span> Foo;

	<span class="comment">-- Delete the object "o"</span>
	<span class="keyword">delete</span> o;
</pre>
<p></p>

<h2 id="attributes">Attributes</h2>
<p>
Attributes in Jargon look and act much like attributes in Ada. Note that
all array types have the same set of attributes and that strings are
considered arrays of characters in this context.
Attributes are not keywords and may be used as variable names. The
single quote ''' is used to denote an attribute.<br />
Attributes may be used on the name of a type or module
or a variable of a type or an instance of an module (an object).
</p>
<b>Generic Attributes</b>
<table class="listing">
<tr class="head"><th>Attribute</th><th>Description</th>
<th>Primary</th><th>Object</th></tr>

<tr class="listing"><td>handlers</td><td>Returns an array of handler
names for an object. Return type string[].</td>
<td class="unchecked"> </td>
<td class="checked">X</td></tr>

<tr class="listing"><td>length</td><td>Number of elements in
an array. Returns type int.</td>
<td class="unchecked"> </td>
<td class="checked">X</td></tr>

<tr class="listing"><td>max</td><td>Largest value that can be stored
in this type. This is the value "true" for booleans.</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>min</td><td>Smallest value that can be stored
in this type. This is the value "false" for booleans.</td>
<td class="checked">X</td>
<td class="unchecked"> </td></tr>

<tr class="listing"><td>name</td><td>The name of this object. Return
type string.</td>
<td class="unchecked"> </td>
<td class="checked">X</td></tr>

<tr class="listing"><td>size</td><td>Size (in bytes) of an object or type.
Note that the compiler may pack boolean types making them 0 bytes.
Return type int.</td>
<td class="checked">X</td>
<td class="checked">X</td></tr>

</table>
<p>
The following attributes are used for type conversion.
Note that all conversions are &quot;smart.&quot; For example,
a conversion from a string to an int will try to parse the string as
an integer.
</p>
<b>Conversion Attributes</b>
<table class="listing">

<tr class="head"><th>Attribute</th><th>Description</th></tr>

<tr class="listing"><td>bool</td>
<td>Convert to a bool.</td></tr>

<tr class="listing"><td>char</td>
<td>Convert to a char.</td></tr>

<tr class="listing"><td>float</td>
<td>Convert to a float.</td></tr>

<tr class="listing"><td>int</td>
<td>Convert to an int.</td></tr>

<tr class="listing"><td>string</td>
<td>Convert to a string.</td></tr>

</table>
<p></p>

<h2 id="concurrency">Concurrency</h2>
<p>
Concurrency in Jargon is accomplished using a special kind of module,
called a thread, and critical sections.
A thread module acts very much like a regular module which does not
require the new handler to return. Handlers in threads work the same
way as handlers in modules.</p>
<pre>
	<span class="keyword">thread</span> TheThread;
		<i>Local variables and handlers</i>

		<span class="comment">-- Thread entry point</span>
		<span class="keyword">new</span>;
		<span class="keyword">end</span>;

		<span class="comment">-- Optional destructor</span>
		<span class="keyword">delete</span>;
		<span class="keyword">end</span>;

	<span class="keyword">end</span>;
</pre>
<p>
A thread can be stopped by either invoking delete on the object from
outside the thread or by returning from the new handler from within
the thread, in which case the thread must still be deleted to reclaim
memory. If the thread is in a critical section when delete is invoked,
the delete will stall until the thread exits the critical section.
Critical sections may be used within thread handlers to lock the thread.
Only one thread of execution for an object can be in a critical section
at a time.</p>
<pre>
	<span class="keyword">critical</span>;
		<i>Code that may modify thread variables</i>
	<span class="keyword">end</span>;
</pre>
<p />

<h2 id="exceptions">Exceptions</h2>
<p>
This is not currently implemented. I am still considering whether exceptions
would be useful in Jargon. With inheritance and dynamic handler dispatch,
exceptions seem superfluous.
</p><p>
Any type of object (primative or class instance) can be used as an exception.
</p>
<pre>
	<span class="comment">-- Raise an exception</span>
	<span class="keyword">string</span> exception = <span class="literal">"an error occurred"</span>;
	<span class="keyword">raise</span> exception;

	<span class="comment">-- Raise an exception that is an instance of a class.</span>
	Foo exception = <span class="keyword">new</span> Foo;
	<span class="keyword">raise</span> exception;

	<span class="keyword">raise new</span> Foo;		<span class="comment">-- Also works</span>

	<span class="comment">-- Catching an exception</span>
	<span class="keyword">try</span>;
		<span class="comment">-- Do something that might raise an exception</span>
	<span class="keyword">catch string</span> s;
		<span class="comment">-- A string (s) was thrown as an exception</span>
	<span class="keyword">catch</span> Foo e;
		<span class="comment">-- A Foo object (e) was thrown as an exception</span>
	<span class="keyword">end</span>;
</pre>
<p />

<h2 id="misc">Miscellaneous Language Features</h2>
<p />
<pre>
	<span class="comment">-- Import the contents of "file" in directory "dir"</span>
	<span class="comment">-- "file" should not contain a file extension</span>
	<span class="keyword">import</span> <span class="literal">dir/file</span>;

	<span class="comment">-- Compiler/platform specific pragma</span>
	<span class="keyword">pragma</span> blah(blah);

	<span class="comment">-- Insert an assembly language block
	-- This is used to implement the standard library and no
	-- standard interface to the language is specified (yet).</span>
	<span class="keyword">asm</span>;
		<i>assembly code</i>
	<span class="keyword">end</span>;
</pre>
<p />

<h2 id="tobe">Features To Be Realized</h2>
<p />
<ul>
	<li>Static array data.</li>
</ul>
<p></p>

<p>
<a href="../../index.shtml">Home</a> /
<a href="../index.shtml">Projects</a> /
<a href="index.shtml">Jargon</a>
</p>

<!--#include virtual="/tail.shtml"-->

