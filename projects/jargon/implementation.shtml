
<!--#set var="TITLE" value="Jargon Implementation Details"-->
<!--#include virtual="/head.shtml"-->

<h1><!--#echo var="TITLE"--></h1>

<ul>
	<li><a href="#arrays">Arrays</a></li>
	<li><a href="#handlers">Handlers</a></li>
	<li><a href="#dispatch">Message Dispatch</a></li>
	<li><a href="#modules">Modules</a></li>
	<li><a href="#objects">Objects</a></li>
	<li><a href="#inheritence">Inheritence</a></li>
	<li><a href="#strings">Strings</a></li>
</ul>

<h2 id="arrays">Arrays</h2>
<p>
An array is a pointer to the following structure:
</p>
<table class="listing">
	<tr class="head"><th>Name</th><th>Type</th><th>Description</th></tr>
	<tr class="listing">
		<td>len</td><td>unsigned int</td><td>The length of the array.</td>
	</tr><tr class="listing">
		<td>data</td><td>structure</td><td>The elements of the array.</td>
	</tr>
</table>
<p>
Arrays with multiple dimensions can be supported either by using arrays
of arrays or by calculating the offsets within the program.
</p>

<h2 id="handlers">Handlers</h2>
<p>
A handler is a function which is invoked when a &quot;handled&quot;
message is sent to a module or object. A message can be handled by
a module or object when a handler within the module has the same name
as the message and takes the same arguments. If a module does not
have a handler capable of handling a message, the message is passed
to the parent module (if any). If there is no parent module, the program
will abort.
</p>

<h2 id="dispatch">Message Dispatch</h2>
<p>
When a message is passed to a module or object, the following sequence of
events takes place:
</p>
<ul>
	<li>The object or module's handler list is located.</li>
	<li>A string comparison is done for each of the handlers until
	a match is found. If no matches are found, the module's parent
	is located and the process repeats.</li>
	<li>If a handler is found for the message, it is invoked. Otherwise
	a default handler is invoked that aborts the program.</li>
</ul>

<h2 id="modules">Modules</h2>
<p>
A module is a static object containing handlers and data.
Modules may be dynamically instanciated to form
<a href="#objects">objects</a>. The structure for a module is:
</p>
<b>Module Structure</b>
<table class="listing">
	<tr class="head">
		<th>Name</th><th>Type</th><th>Description</th>
	</tr><tr class="listing">
		<td>name</td>
		<td>pointer</td>
		<td>A pointer to the zero terminated name of the module.</td>
	</tr><tr class="listing">
		<td>parent</td>
		<td>pointer</td>
		<td>A pointer to the parent of the module or NULL.</td>
	</tr><tr class="listing">
		<td>handlers</td>
		<td>pointer</td>
		<td>A pointer to a list of handlers in the module.</td>
	</tr><tr class="listing">
		<td>handler</td>
		<td>pointer</td>
		<td>A pointer to the function to perform handler execution.</td>
	</tr><tr class="listing">
		<td>data</td>
		<td>structure</td>
		<td>The static data for the module.</td>
	</tr>
</table>
<p>
A module must have at least one handler otherwise the module is pointless.
The handlers are stored in an array. Each element has the following
structure:
</p>
<b>Handler List Structure</b>
<table class="listing">
	<tr class="head">
		<th>Name</th><th>Type</th><th>Description</th>
	</tr><tr class="listing">
		<td>name</td>
		<td>pointer</td>
		<td>A pointer to the zero terminated name of the handler.
		This includes the encoded arguments after a period character.
		See the <a href="#encoding">Argument Encoding</a> table.</td>
	</tr><tr class="listing">
		<td>code</td>
		<td>pointer</td>
		<td>A pointer to the entry point of the handler.</td>
	</tr>
</table>
<p>
In order to distinguish between handlers that have the same name but
take different arguments, a period character is appended to the handler
name and then the argument types (if any), encoded using the following
table, are appended. If an argument is an array, a decimal number is
appended after the argument type to indicate the level of
indirection.
</p>

<b>
	<a id="encoding" class="idb">Argument Encoding</a>
</b>
<table class="listing">
	<tr class="head">
		<th>Encoding</th><th>Type</th>
	</tr><tr class="listing">
		<td>B</td><td>bool</td>
	</tr><tr class="listing">
		<td>C</td><td>char</td>
	</tr><tr class="listing">
		<td>I</td><td>int</td>
	</tr><tr class="listing">
		<td>F</td><td>float</td>
	</tr><tr class="listing">
		<td>S</td><td>string</td>
	</tr><tr class="listing">
		<td>O</td><td>object</td>
	</tr>
</table><p />

<h2 id="objects">Objects</h2>
<p>
An &quot;object&quot; is an instance of a module. An object points to
an object data structure:
</p>
<b>Object Structure</b>
<table class="listing">
	<tr class="head">
		<th>Name</th><th>Type</th><th>Description</th>
	</tr><tr class="listing">
		<td>module</td>
		<td>pointer</td>
		<td>A pointer to the static module data.</td>
	</tr><tr class="listing">
		<td>data</td>
		<td>structure</td>
		<td>The data associated with the object.</td>
	</tr>
</table>
<p>
Objects are allocated and instanciated using the &quot;new&quot; keyword.
Objects are finalized and deallocated using the &quot;delete&quot; keyword.
</p>

<h2 id="strings">Strings</h2>
<p>
A &quot;string&quot; object is a data structure having the following
attributes:
</p>
<b>String Structure</b>
<table class="listing">
	<tr class="head">
		<th>Name</th><th>Type</th><th>Description</th>
	</tr><tr class="listing">
		<td>max</td>
		<td>unsigned int</td>
		<td>The maximum length of the string before reallocation will
		be required.</td>
	</tr><tr class="listing">
		<td>count</td>
		<td>unsigned int</td>
		<td>Reference count.</td>
	</tr><tr class="listing">
		<td>str</td>
		<td>pointer</td>
		<td>A pointer to the zero terminated string of characters. Note that
		the zero is not considered for len and max.</td>
	</tr>
</table>
<p>
When a string object is first created, it is allocated STRING_BLOCK_SIZE
characters. The len field is set to 0, and the first element of str is
also set to 0. If the string is created with an initial value, max and len
are both set to the length of the string. When a string grows beyond the max
field, it is reallocated in increments of STRING_BLOCK_SIZE. If a string
length falls below max - STRING_BLOCK_SIZE, it is reallocated to the length
of the string.
</p><p>
When passed as message arguments strings are passed by-reference.
</p>

<p>
<a href="../../index.shtml">Home</a> /
<a href="../index.shtml">Projects</a> /
<a href="index.shtml">Jargon</a>
</p>

<!--#include virtual="/tail.shtml"-->

