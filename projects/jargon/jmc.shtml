
<!--#set var="TITLE" value="Jargon Machine Code"-->
<!--#include virtual="/head.shtml"-->

<h1><!--#echo var="TITLE"--></h1>

The Jargon Machine Code Specification v0.1 20030729 &lt;&gt; 20031018<br/>
by Joe Wingbermuehle

<ul>
	<li><a href="#background">Background</a></li>
	<li><a href="#registers">Registers</a></li>
	<li><a href="#formats">Instruction Formats</a></li>
	<li><a href="#intmath">Integer Arithmetic Instructions</a></li>
	<li><a href="#floatmath">Floating Point Arithmetic Instructions</a></li>
	<li><a href="#loadstore">Load/Store Instructions</a></li>
	<li><a href="#misc">Miscellaneous Instructions</a></li>
	<li><a href="#calling">Calling Conventions</a></li>
	<li><a href="#system">System Calls</a><ul>
		<li><a href="gui.shtml">GUI Calls</a></li>
	</ul></li>
</ul>

<h2 id="background">Background</h2>
<p>
	Jargon Machine Code (JMC) was devised as a simple method to allow platform
	independence. JMC can be either interpreted or compiled into native
	machine code using an external program. Furthermore, JMC could be
	run through an optimizer.
</p>

<h2 id="registers">Registers</h2>
<p>
	<b>Integer Registers</b><br />
	Jargon Machine Code has 16 32-bit integer registers. In Jargon
	Assembly Language, these registers are denoted by r0 through r15.
	In Jargon Machine Code, these registers are represented as the
	hex values 00 through 0F. r0 always contains zero.
</p><p>
	<b>Float Registers</b><br />
	Jargon Machine Code has 16 64-bit floating point registers. In Jargon
	Assembly Language, these registers are denoted by f0 through f15. In
	Jargon Machine Code, these registers are represented as the
	hex values 10 through 1F. f0 always contains zero.
</p>

<h2 id="formats">Instruction Formats</h2>
<p>
	All instructions are 32 bits. Immediate values are 2s complement.
</p>
<b>Arithmetic</b>
<table class="listing">
	<tr class="head"><th>Name</th><th>Value</th></tr>
	<tr class="listing">
		<td>Prefix</td>
		<td>%00</td>
	</tr><tr class="listing">
		<td>Instruction code</td>
		<td>6 bits</td>
	</tr><tr class="listing">
		<td>Destination register</td>
		<td>4 bits (register type determined by code)</td>
	</tr><tr class="listing">
		<td>Source A</td>
		<td>4 bits (register type determined by code)</td>
	</tr><tr class="listing">
		<td>Source B</td>
		<td>16 bits (register or immediate)</td>
	</tr>
</table>
<p></p>
<b>Load/Store</b>
<table class="listing">
	<tr class="head"><th>Name</th><th>Value</th></tr>
	<tr class="listing">
		<td>Prefix</td>
		<td>%01</td>
	</tr><tr class="listing">
		<td>Instruction code</td>
		<td>5 bits</td>
	</tr><tr class="listing">
		<td>Register</td>
		<td>5 bits</td>
	</tr><tr class="listing">
		<td>Address register</td>
		<td>4 bits (must be an integer register)</td>
	</tr><tr class="listing">
		<td>Offset</td>
		<td>16 bits (immediate)</td>
	</tr>
</table>
<p />
<b>Branch</b>
<table class="listing">
	<tr class="head"><th>Name</th><th>Value</th></tr>
	<tr class="listing">
		<td>Prefix</td>
		<td>%10</td>
	</tr><tr class="listing">
		<td>Instruction code</td>
		<td>3 bits</td>
	</tr><tr class="listing">
		<td>Condition register</td>
		<td>4 bits (must be an integer register)</td>
	</tr><tr class="listing">
		<td>Destination</td>
		<td>23 bits (register or immediate)</td>
	</tr>
</table>
<p />
<b>Miscellaneous</b>
<table class="listing">
	<tr class="head"><th>Name</th><th>Value</th></tr>
	<tr class="listing">
		<td>Prefix</td>
		<td>%11</td> 
	</tr><tr class="listing">
		<td>Instruction code</td>
		<td>4 bits</td>
	</tr><tr class="listing">
		<td>Data</td>
		<td>26 bits</td>
	</tr>
</table>
<p></p>

<h2 id="intmath">Integer Arithmetic Instructions</h2>
<p></p>
<table class="listing">
	<tr class="head"><th>Code</th><th>Symbol</th><th>Description</th></tr>
	<tr class="listing">
		<td>%000000</td><td>add</td><td>Add</td>
	</tr><tr class="listing">
		<td>%000001</td><td>addi</td><td>Add immediate</td>
	</tr><tr class="listing">
		<td>%000010</td><td>sub</td><td>Subtract</td>
	</tr><tr class="listing">
		<td>%000011</td><td>subi</td><td>Subtract immediate</td>
	</tr><tr class="listing">
		<td>%000100</td><td>mul</td><td>Multiply</td>
	</tr><tr class="listing">
		<td>%000101</td><td>muli</td><td>Multiply immediate</td>
	</tr><tr class="listing">
		<td>%000110</td><td>div</td><td>Divide</td>
	</tr><tr class="listing">
		<td>%000111</td><td>divi</td><td>Divide immediate</td>
	</tr><tr class="listing">
		<td>%001000</td><td>mod</td><td>Modulus</td>
	</tr><tr class="listing">
		<td>%001001</td><td>modi</td><td>Modulus immediate</td>
	</tr><tr class="listing">
		<td>%001010</td><td>and</td><td>Bitwise AND</td>
	</tr><tr class="listing">
		<td>%001011</td><td>andi</td><td>Bitwise AND immediate</td>
	</tr><tr class="listing">
		<td>%001100</td><td>or</td><td>Bitwise OR</td>
	</tr><tr class="listing">
		<td>%001101</td><td>ori</td><td>Bitwise OR immediate</td>
	</tr><tr class="listing">
		<td>%001110</td><td>oru</td><td>Bitwise OR upper half word</td>
	</tr><tr class="listing">
		<td>%001111</td><td>orui</td>
		<td>Bitwise OR upper half word immediate</td>
	</tr><tr class="listing">
		<td>%010000</td><td>xor</td><td>Bitwise XOR</td>
	</tr><tr class="listing">
		<td>%010001</td><td>xori</td><td>Bitwise XOR immediate</td>
	</tr><tr class="listing">
		<td>%010010</td><td>nor</td><td>Bitwise NOR</td>
	</tr><tr class="listing">
		<td>%010011</td><td>nori</td><td>Bitwise NOR immediate</td>
	</tr><tr class="listing">
		<td>%010100</td><td>pow</td><td>Power</td>
	</tr><tr class="listing">
		<td>%010101</td><td>powi</td><td>Power immediate</td>
	</tr><tr class="listing">
		<td>%010110</td><td>seteq</td><td>Set if equal</td>
	</tr><tr class="listing">
		<td>%010111</td><td>seteqi</td><td>Set if equal to immediate</td>
	</tr><tr class="listing">
		<td>%011000</td><td>setne</td><td>Set if not equal</td>
	</tr><tr class="listing">
		<td>%011001</td><td>setnei</td><td>Set if not equal to immediate</td>
	</tr><tr class="listing">
		<td>%011010</td><td>setgt</td><td>Set if greater than</td>
	</tr><tr class="listing">
		<td>%011011</td><td>setgti</td><td>Set if greater than immediate</td>
	</tr><tr class="listing">
		<td>%011100</td><td>setge</td>
		<td>Set if greater than or equal to</td>
	</tr><tr class="listing">
		<td>%011101</td><td>setgei</td>
		<td>Set if greater than or equal to immediate</td>
	</tr>
</table>
<p></p>

<h2 id="floatmath">Floating Point Arithmetic Instructions</h2>
<p></p>
<table class="listing">
	<tr class="head"><th>Code</th><th>Symbol</th><th>Description</th></tr>
	<tr class="listing">
		<td>%100000</td><td>addf</td><td>Add</td>
	</tr><tr class="listing">
		<td>%100001</td><td>subf</td><td>Subtract</td>
	</tr><tr class="listing">
		<td>%100010</td><td>mulf</td><td>Multiply</td>
	</tr><tr class="listing">
		<td>%100011</td><td>divf</td><td>Divide</td>
	</tr><tr class="listing">
		<td>%100100</td><td>powf</td><td>Power</td>
	</tr><tr class="listing">
		<td>%100101</td><td>setgtf</td><td>Set if greater than</td>
	</tr><tr class="listing">
		<td>%100110</td><td>setgef</td>
		<td>Set if greater than or equal to</td>
	</tr><tr class="listing">
		<td>%110000</td><td>mtirf</td>
		<td>Move to integer register</td>
	</tr><tr class="listing">
		<td>%110001</td><td>mfirf</td>
		<td>Move from integer register</td>
	</tr><tr class="listing">
		<td>%110010</td><td>mfiruf</td>
		<td>Move from integer register unsigned</td>
	</tr>
</table>
<p></p>

<h2 id="loadstore">Load/Store Instructions</h2>
<p></p>
<table class="listing">
	<tr class="head"><th>Code</th><th>Symbol</th><th>Description</th></tr>
	<tr class="listing">
		<td>%00000</td><td>ldb</td><td>Load byte</td>
	</tr><tr class="listing">
		<td>%00001</td><td>ldbe</td><td>Load byte and extend</td>
	</tr><tr class="listing">
		<td>%00010</td><td>ldh</td><td>Load half word</td>
	</tr><tr class="listing">
		<td>%00011</td><td>ldhe</td><td>Load half word and extend</td>
	</tr><tr class="listing">
		<td>%00100</td><td>ldw</td><td>Load word</td>
	</tr><tr class="listing">
		<td>%00101</td><td>ldwe</td><td>Load word and extend</td>
	</tr><tr class="listing">
		<td>%00110</td><td>ldd</td><td>Load double word</td>
	</tr><tr class="listing">
		<td>%00111</td><td>ldde</td><td>Load double word and extend</td>
	</tr><tr class="listing">
		<td>%01000</td><td>stb</td><td>Store byte</td>
	</tr><tr class="listing">
		<td>%01001</td><td>sth</td><td>Store half word</td>
	</tr><tr class="listing">
		<td>%01010</td><td>stw</td><td>Store word</td>
	</tr><tr class="listing">
		<td>%01011</td><td>std</td><td>Store double word</td>
	</tr><tr class="listing">
		<td>%10000</td><td>lds</td><td>Load from stack</td>
	</tr><tr class="listing">
		<td>%10001</td><td>sts</td><td>Store to stack</td>
	</tr>
</table>
<p></p>

<h2 id="branch">Branch Instructions</h2>
<p></p>
<table class="listing">
	<tr class="head"><th>Code</th><th>Symbol</th><th>Description</th></tr>
	<tr class="listing">
		<td>%000</td><td>jt</td><td>Jump if true</td>
	</tr><tr class="listing">
		<td>%001</td><td>jf</td><td>Jump if false</td>
	</tr><tr class="listing">
		<td>%010</td><td>call</td><td>Call</td>
	</tr><tr class="listing">
		<td>%011</td><td>ret</td><td>Return</td>
	</tr><tr class="listing">
		<td>%100</td><td>jtr</td><td>Jump if true to register</td>
	</tr><tr class="listing">
		<td>%101</td><td>jfr</td><td>Jump if false to register</td>
	</tr><tr class="listing">
		<td>%110</td><td>callr</td><td>Call register</td>
	</tr>
</table>
<p></p>

<h2 id="misc">Miscellaneous Instructions</h2>
<p></p>
<table class="listing">
	<tr class="head"><th>Code</th><th>Symbol</th><th>Description</th></tr>
	<tr class="listing">
		<td>%0000</td><td>push</td><td>Push a register on the stack</td>
	</tr><tr class="listing">
		<td>%0001</td><td>pushi</td>
		<td>Push an immediate on the stack</td>
	</tr><tr class="listing">
		<td>%0010</td><td>pop</td><td>Pop a register off of the stack</td>
	</tr><tr class="listing">
		<td>%0100</td><td>alloc</td>
		<td>Allocate words on the integer data stack</td>
	</tr><tr class="listing">
		<td>%0101</td><td>alloci</td>
		<td>Allocate words on the integer data stack (immediate)</td>
	</tr><tr class="listing">
		<td>%0110</td><td>free</td>
		<td>Free words off of the integer data stack</td>
	</tr><tr class="listing">
		<td>%0111</td><td>freei</td>
		<td>Free words off of the integer data stack (immediate)</td>
	</tr><tr class="listing">
		<td>%1000</td><td>allocf</td>
		<td>Allocate double words on the float data stack</td>
	</tr><tr class="listing">
		<td>%1001</td><td>allocfi</td>
		<td>Allocate double words on the float data stack (immediate)</td>
	</tr><tr class="listing">
		<td>%1010</td><td>freef</td>
		<td>Free double words off of the float data stack</td>
	</tr><tr class="listing">
		<td>%1011</td><td>freefi</td>
		<td>Free double words off of the float data stack (immediate)</td>
	</tr><tr class="listing">
		<td>%1110</td><td>sys</td><td>System call</td>
	</tr><tr class="listing">
		<td>%1111</td><td>sysi</td><td>System call immediate</td>
	</tr>
</table>
<p></p>

<h2 id="calling">Calling Conventions</h2>
<p>
	All arguments are pushed on the stack with the first argument pushed
	first. The return value, if any, is returned in the first register
	appropriate for holding the value. Registers are not preserved across
	function calls.
</p>

<h3>
	<a id="system" class="id">System Calls</a>
</h3>
<p />
<table class="listing">
	<tr class="head"><th>Number</th><th>Description</th></tr>
	<tr class="listing">
		<td>0</td><td>void exit(int code)</td>
	</tr><tr class="listing">
		<td>1</td><td>char *allocate(int size)</td>
	</tr><tr class="listing">
		<td>2</td><td>char *reallocate(char *ptr, int size)</td>
	</tr><tr class="listing">
		<td>3</td><td>void release(char *ptr)</td>
	</tr><tr class="listing">
		<td>4</td><td>int print(char value)</td>
	</tr><tr class="listing">
		<td>5</td><td>int print(int value)</td>
	</tr><tr class="listing">
		<td>6</td><td>int print(float value)</td>
	</tr><tr class="listing">
		<td>7</td><td>int print(char *value)</td>
	</tr><tr class="listing">
		<td>8</td><td>int read()</td>
	</tr><tr class="listing">
		<td>9</td><td>int open(string fileName, int mode)</td>
	</tr><tr class="listing">
		<td>10</td><td>void close(int fd)</td>
	</tr><tr class="listing">
		<td>11</td><td>boolean isEOF(int fd)</td>
	</tr><tr class="listing">
		<td>12</td><td>int isError(int fd)</td>
	</tr><tr class="listing">
		<td>13</td><td>int fprint(int fd, char value)</td>
	</tr><tr class="listing">
		<td>14</td><td>int fprint(int fd, int value)</td>
	</tr><tr class="listing">
		<td>15</td><td>int fprint(int fd, float value)</td>
	</tr><tr class="listing">
		<td>16</td><td>int fprint(int fd, string value)</td>
	</tr><tr class="listing">
		<td>17</td><td>int fread(int fd)</td>
	</tr><tr class="listing">
		<td>18</td><td>int time()</td>
	</tr><tr class="listing">
		<td>19</td><td>void srand(int seed)</td>
	</tr><tr class="listing">
		<td>20</td><td>int rand()</td>
	</tr><tr class="listing">
		<td>64</td><td>string createString(int length)</td>
	</tr><tr class="listing">
		<td>65</td><td>void addStringRef(string str)</td>
	</tr><tr class="listing">
		<td>66</td><td>void removeStringRef(string str)</td>
	</tr><tr class="listing">
		<td>67</td><td>char getChar(string str, int index)</td>
	</tr><tr class="listing">
		<td>68</td><td>void setChar(string str, int index, char ch)</td>
	</tr><tr class="listing">
		<td>69</td><td>string strcat(string dest, string src)</td>
	</tr><tr class="listing">
		<td>70</td><td>void strcpy(string dest, string src)</td>
	</tr><tr class="listing">
		<td>71</td><td>int strlen(string str)</td>
	</tr><tr class="listing">
		<td>72</td><td>string itoa(int value)</td>
	</tr><tr class="listing">
		<td>73</td><td>string ftoa(float value)</td> 
	</tr><tr class="listing">
		<td>74</td><td>string ptoa(int value)</td>
	</tr><tr class="listing">
		<td>75</td><td>int atoi(string str)</td>
	</tr><tr class="listing">
		<td>76</td><td>float atof(string str)</td>
	</tr><tr class="listing">
		<td>128</td><td>var gui(..., int code)</td>
	</tr>
</table>
<p></p>

<p>
<a href="../../index.shtml">Home</a> /
<a href="../index.shtml">Projects</a> /
<a href="index.shtml">Jargon</a>
</p>

<!--#include virtual="/tail.shtml"-->

