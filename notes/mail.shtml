<!--#set var="TITLE" value="OpenBSD Mail Server"-->
<!--#include virtual="/head.shtml"-->

<h1><!--#echo var="TITLE"--></h1>
<h4>2016-04-21</h4>

<p>
I recently went through the trouble of migrating my mail server
to a different computer.  In an effort to make this process
less painful next time, I documented the steps.  Here they 
are in case others find them useful.
</p>

<h2>Overview</h2>
<p>
These are the steps for setting up a system running
<a href="http://www.openbsd.org/">OpenBSD</a> to act as a
mail server.
</p>

<p>
For sending mail, I use <a href="https://www.opensmtpd.org/">OpenSMPTD</a>,
which comes with OpenBSD.  OpenSMTPD is configured to receive mail for the
local host and to send mail to a relay host for mail received
either from the local host or from authenticated hosts via SMTPS.
<p>

<p>
<a href="http://spamassassin.apache.org/">Spamassassin</a> is used via
<a href="http://www.worlddesign.com/index.cfm/page/software/open-source/spampd.htm">spampd</a>
for spam filtering and <a href="http://dovecot.org/">Dovecot</a>
is used to provide IMAPS access to mail.
</p>

<h2>Prepare</h2>
<p>
You may want to move existing mail to the new server.  Assuming you are
using maildir, this can be accomplished by copying the existing
directory hierarchy (here we assume ~/.mail).  However, this should
be done with both the new and old mail servers stopped.  It should probably
be done right before bringing up the new mail server (running the "start"
commands), but can be done at any time.  Just beware that you don't get
mail while the mail server is down, though other mail servers will retry
if you're fast enough.
</p>

<h2>Enable softdeps</h2>
<p>
This isn't really necessary, but may improve performance.
Enable softdeps and disable atime by adding <span class="code">noatime</span>
and <span class="code">softdep</span> to the mount options.  This will require
remounting the associated file systems (or rebooting).
</p>

<h2>Install Packages</h2>
<p>
    Run the following command to install the necessary packages
    from ports:
</p>
<pre class="code">
doas pkg_add dovecot procmail spampd
</pre>

<h2>Generate Keys</h2>
<p>
Run the following commands to generate keys for smtpd and dovecot.
Note that the "openssl req" command may prompt for input.
</p>
<pre class="code">
doas openssl genrsa -out /etc/ssl/private/server.key 4096
doas openssl req -new -x509 -key /etc/ssl/private/server.key \
                 -out /etc/ssl/server.crt
doas chmod 600 /etc/ssl/server.crt
doas chmod 600 /etc/ssl/private/server.key
</pre>

<h2>Configure smtpd</h2>
<p>Update /etc/mail/smtpd.conf to contain (changing <i>hostname</i> and
<i>relay</i> as appropriate):</p>
<pre class="code">
pki <i>hostname</i> certificate "/etc/ssl/server.crt"
pki <i>hostname</i> key "/etc/ssl/private/server.key"

listen on socket
listen on lo0 port 25 tag Filtered
listen on egress port 25 hostname <i>hostname</i> tls pki <i>hostname</i>
listen on egress port 465 hostname <i>hostname</i> pki <i>hostname</i> smtps auth tag Authed

table aliases file:/etc/mail/aliases

# Local delivery
accept tagged Filtered for any alias <aliases> deliver to mda "procmail -f -"
accept from local for domain "<i>hostname</i>" alias &lt;aliases&gt; deliver to mda "procmail -f -"
accept from local for local alias &lt;aliases&gt; deliver to mda "procmail -f -"

# Spam filter for incoming.
accept from any for domain "<i>hostname</i>" relay via "smtp://127.0.0.1:10025"

# Relay local and authed.
accept from any tagged Authed for any relay via "smtp://<i>relay</i>"
accept from local for any relay via "smtp://<i>relay</i>"
</pre>

<h2>Configure procmail</h2>
<p>
These are filters that you will probably want to change to your liking.
Update /etc/profilemailrc to contain something like:
</p>

<pre class="code">
SENDMAIL="/usr/sbin/sendmail -oi -t"
DEFAULT="$HOME/.mail/"
MAILDIR="$HOME/.mail/"
DROPPRIVS=yes

:0
* ^X-Spam-Status: Yes
.Spam/
</pre>

<h2>Configure dovecot</h2>
<p>File /etc/dovecot/dovecot.conf:</p>
<pre class="code">
protocols = imap
ssl = required
ssl_cert = &lt;/etc/ssl/server.crt
ssl_key = &lt;/etc/ssl/private/server.key
listen = *

auth_socket_path = /var/dovecot/auth-userdb
base_dir = /var/dovecot/
first_valid_uid = 1000
hostname = <i>hostname</i>
mail_location = maildir:~/.mail

passdb {
        driver = bsdauth
}
userdb {
        driver = passwd
}
</pre>

<p>Add the following to /etc/login.conf:</p>
<pre class="code">
dovecot:\
    :openfiles-cur=512:\
    :tc=daemon:
</pre>

<h2>Enable Services</h2>
Run the following to start the services at boot:
<pre class="code">
doas rcctl enable dovecot
doas rcctl enable spampd
</pre>
Note that smtpd is enabled by default.

To start the services without rebooting:
<pre class="code">
doas /etc/rc.d/smtpd restart
doas /etc/rc.d/dovecot start
doas /etc/rc.d/spampd start
</pre>

<h2>Fix Permissions</h2>
<p>
Spamassassin needs to be able to access the /var/spampd/.spamassassin
directory.  So make sure it can:
</p>
<pre class="code">
chown _spampd:_spampd /var/spampd/.spamassassin
</pre>

<h2>Update DNS</h2>
<p>
Update your DNS records to point to the mail server.
</p>

<h2>Training Spamassassin</h2>
<p>
Using training data, Spamassassin can do a lot better at classifying spam.
To train Spamassassin, use <span class="code">sa-learn</span>.
I run the following script periodically to update the spam filter:
</p>

<pre class="code">
sa-learn --no-sync --spam $HOME/.mail/.Spam/{new,cur}
sa-learn --no-sync --ham $HOME/.mail/cur
sa-learn --sync
doas cp $HOME/.spamassassin/* /var/spampd/.spamassassin/
doas /etc/rc.d/spampd restart
</pre>

<p>
<a href="../index.shtml">Home</a> /
<a href="index.shtml">Notes</a>
</p>

<!--#include virtual="/tail.shtml"-->
